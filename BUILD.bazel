# Root BUILD.bazel file for RISC-V PPA Study

load("@rules_python//python:defs.bzl", "py_test", "py_binary")

# Simulation targets to replace shell scripts
genrule(
    name = "simple_core_simulation",
    srcs = [
        "//design/hardware/rtl/cores/simple_core:simple_core_rtl",
        "//design/hardware/rtl/testbench:universal_testbench",
        "//design/software/hello-world:executable",
    ],
    outs = ["simple_core_simulation.log"],
    cmd = """
        set -e
        # Create output directory and copy hex file
        mkdir -p $(GENDIR)/output
        cp $(location //design/software/hello-world:executable) $(GENDIR)/output/hello_world.hex
        
        # Create simple testbench file
        cat > $(GENDIR)/output/simple_tb.v << 'EOL'
`timescale 1ns / 1ps

module testbench;
    // Clock and reset generation
    reg clk = 0;
    reg rst_n = 0;
    
    // Always toggle clock
    always #5 clk = ~clk;
    
    // Wires to connect to the core
    wire [31:0] imem_addr;
    reg [31:0] imem_data;
    wire imem_en;
    wire [31:0] dmem_addr;
    wire [31:0] dmem_wdata;
    reg [31:0] dmem_rdata;
    wire dmem_en;
    wire dmem_we;
    wire [31:0] debug_pc;
    wire [31:0] debug_instr;
    wire [4:0] debug_rd;
    wire [31:0] debug_rd_wdata;
    wire debug_rd_we;
    
    // Memory array
    reg [31:0] imem [0:4095];
    reg [31:0] dmem [0:4095];
    integer i;
    
    // Core instance
    core dut (
        .clk(clk),
        .rst_n(rst_n),
        .imem_addr(imem_addr),
        .imem_data(imem_data),
        .imem_en(imem_en),
        .dmem_addr(dmem_addr),
        .dmem_wdata(dmem_wdata),
        .dmem_rdata(dmem_rdata),
        .dmem_en(dmem_en),
        .dmem_we(dmem_we),
        .debug_pc(debug_pc),
        .debug_instr(debug_instr),
        .debug_rd(debug_rd),
        .debug_rd_wdata(debug_rd_wdata),
        .debug_rd_we(debug_rd_we)
    );
    
    // Memory read
    always @(*) begin
        if (imem_en) begin
            imem_data = imem[imem_addr[13:2]];
        end else begin
            imem_data = 32'h0;
        end
    end
    
    // Data memory read/write
    always @(posedge clk) begin
        if (dmem_en) begin
            if (dmem_we) begin
                dmem[dmem_addr[13:2]] <= dmem_wdata;
            end
            dmem_rdata <= dmem[dmem_addr[13:2]];
        end
    end
    
            // Load program and run simulation
    initial begin
        // Clear memory
        for (i = 0; i < 4096; i = i + 1) begin
            imem[i] = 32'h0;
            dmem[i] = 32'h0;
        end
        
        // Load hex file (relative to the run directory)
        $$display("Loading program from hello_world.hex");
        $$readmemh("hello_world.hex", imem);
        
        // Reset sequence
        rst_n = 0;
        #20 rst_n = 1;
        
        // Run for a while
        #10000;
        
        // End simulation
        $$display("Simulation finished");
        $$finish;
    end
    
    // Monitor execution
    always @(posedge clk) begin
        if (rst_n) begin
            $$display("PC: %h, INSTR: %h", debug_pc, debug_instr);
            if (debug_rd_we && debug_rd != 0) begin
                $$display("  x%0d <= %h", debug_rd, debug_rd_wdata);
            end
        end
endmodule
EOL
        
        # Run the simulation
        cd $(GENDIR)/output
        iverilog -o sim_core $(location //design/hardware/rtl/cores/simple_core:simple_core_rtl) simple_tb.v
        vvp sim_core > $(OUTS)
        
        echo "Simulation completed!" >> $(OUTS)
    """,
    message = "Running simple_core simulation with hello-world",
    visibility = ["//visibility:public"],
)

genrule(
    name = "picorv32_simulation",
    srcs = [
        "//design/hardware/rtl/cores/picorv32:picorv32_rtl",
        "//design/hardware/rtl/cores/picorv32:picorv32_adapter",
        "//design/hardware/rtl/testbench:universal_testbench",
        "//design/software/hello-world:executable",
    ],
    outs = ["picorv32_simulation.log"],
    cmd = """
        set -e
        # Create output directory and copy hex file
        mkdir -p $(GENDIR)/output
        cp $(location //design/software/hello-world:executable) $(GENDIR)/output/hello_world.hex
        
        # Run simulation
        cd $(GENDIR)
        iverilog -o sim_core \\
            -I$${PWD}/design/hardware/rtl \\
            $(location //design/hardware/rtl/testbench:universal_testbench) \\
            $(location //design/hardware/rtl/cores/picorv32:picorv32_rtl) \\
            $(location //design/hardware/rtl/cores/picorv32:picorv32_adapter)
        
        vvp sim_core +hex=$(GENDIR)/output/hello_world.hex > $(OUTS)
        
        echo "Simulation completed!" >> $(OUTS)
    """,
    message = "Running picorv32 simulation with hello-world",
    visibility = ["//visibility:public"],
)

# Stage 0: Environment and Infrastructure Verification
py_test(
    name = "verify_environment",
    srcs = ["validate/tests/test_dependencies.py"],
    main = "validate/tests/test_dependencies.py",
    data = [
        "pyproject.toml",
    ] + glob(["build/flows/*.py", "build/flows/utils/*.py"], allow_empty = True),
    tags = [
        "stage0",
        "verification",
        "environment", 
        "manual",  # Don't run by default with bazel test //...
    ],
    size = "small",
)

# Setup command - equivalent to setup.sh
py_binary(
    name = "setup",
    srcs = ["//build/scripts:setup.py"],
    data = [
        "pyproject.toml",
    ],
    main = "//build/scripts:setup.py",
    tags = ["setup", "manual"],
)

# Simple core full flow target (replaces run_simple_core_flow.sh)
py_binary(
    name = "simple_core_flow",
    srcs = ["//build/flows:main_study_flow.py"],
    main = "//build/flows:main_study_flow.py",
    args = [
        "--config=simple_core_test",
        "--flow=software,simulation",
    ],
    data = [
        "//build/configs:simple_core_test.yaml",
        "//design/hardware/rtl/cores/simple_core:simple_core_rtl",
        "//design/software/hello-world:executable",
    ],
    deps = [
        "//build/flows:software_flow",
        "//build/flows:simulation_flow",
        "//build/flows:utils",
    ],
    visibility = ["//visibility:public"],
)

# Helper rule to group all flow files
filegroup(
    name = "flow_files",
    srcs = glob([
        "build/flows/*.py",
        "build/configs/**/*",
    ], allow_empty = True),
    visibility = ["//visibility:public"],
)

# Prefect orchestration flow
py_binary(
    name = "orchestration",
    srcs = ["//build/scripts:orchestration.py"],
    main = "//build/scripts:orchestration.py",
    deps = [
        "//build/flows:utils",
    ],
    data = [
        ":flow_files",
        "//design/hardware/rtl/cores/simple_core:simple_core_rtl",
        "//design/hardware/rtl/cores/picorv32:picorv32_rtl",
        "//design/software/hello-world:executable",
        "//docs:docs_sources",
    ],
    visibility = ["//visibility:public"],
)
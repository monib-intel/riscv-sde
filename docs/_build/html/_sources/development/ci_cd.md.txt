# CI/CD Pipeline

This document describes the Continuous Integration and Continuous Deployment (CI/CD) pipeline for the RISC-V Silicon Design Environment.

## Overview

The CI/CD pipeline automates the building, testing, and deployment of the environment. It ensures that changes to the codebase are validated before they are merged and deployed.

```mermaid
graph TD
    A[Push to Repository] --> B[Build]
    B --> C[Test]
    C --> D[Analyze]
    D --> E{Pass?}
    E -->|Yes| F[Deploy]
    E -->|No| G[Notify]
```

## Pipeline Stages

### 1. Build

The build stage compiles the project and its dependencies.

#### Tasks:
- Set up the build environment
- Install dependencies
- Build software components
- Build hardware components
- Build documentation

#### Configuration:

```yaml
build:
  image: ubuntu:22.04
  script:
    - apt-get update && apt-get install -y build-essential python3-dev python3-pip
    - pip install -r requirements.txt
    - bazel build //...
```

### 2. Test

The test stage runs the project's test suite.

#### Tasks:
- Run unit tests
- Run integration tests
- Run simulation tests
- Check code coverage

#### Configuration:

```yaml
test:
  image: ubuntu:22.04
  script:
    - pytest validate/tests/
    - ./run_simulation.py --clean --config build/configs/simple_core_test.yaml
  artifacts:
    paths:
      - output/
      - coverage/
```

### 3. Analyze

The analysis stage checks code quality and performs static analysis.

#### Tasks:
- Run linters
- Check coding style
- Perform static analysis
- Check for security vulnerabilities

#### Configuration:

```yaml
analyze:
  image: ubuntu:22.04
  script:
    - pip install pylint flake8
    - pylint build/ design/ validate/
    - flake8 build/ design/ validate/
```

### 4. Deploy

The deploy stage publishes the project and documentation.

#### Tasks:
- Generate documentation
- Publish documentation
- Create release packages
- Update deployment environments

#### Configuration:

```yaml
deploy:
  image: ubuntu:22.04
  script:
    - pip install sphinx sphinx-rtd-theme
    - cd docs && make html
    - ./scripts/publish_docs.sh
  only:
    - main
```

## CI/CD Tools

The project uses the following CI/CD tools:

### GitHub Actions

GitHub Actions is the primary CI/CD platform. The configuration is stored in `.github/workflows/ci.yml`.

Example configuration:

```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build
        run: bazel build //...

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test
        run: pytest validate/tests/

  analyze:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint flake8
      - name: Analyze
        run: |
          pylint build/ design/ validate/
          flake8 build/ design/ validate/

  deploy:
    needs: analyze
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme
      - name: Build documentation
        run: |
          cd docs
          make html
      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
```

### Jenkins

For self-hosted CI/CD, the project also supports Jenkins. The configuration is stored in `Jenkinsfile`.

Example configuration:

```groovy
pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                sh 'pip install -r requirements.txt'
                sh 'bazel build //...'
            }
        }
        stage('Test') {
            steps {
                sh 'pytest validate/tests/'
                sh './run_simulation.py --clean --config build/configs/simple_core_test.yaml'
            }
        }
        stage('Analyze') {
            steps {
                sh 'pip install pylint flake8'
                sh 'pylint build/ design/ validate/'
                sh 'flake8 build/ design/ validate/'
            }
        }
        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                sh 'pip install sphinx sphinx-rtd-theme'
                sh 'cd docs && make html'
                sh './scripts/publish_docs.sh'
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'output/**/*', allowEmptyArchive: true
            junit 'test-results/**/*.xml'
        }
    }
}
```

## Docker Containers

The CI/CD pipeline uses Docker containers to ensure a consistent build environment.

### Base Image

The base image is defined in `build/infrastructure/docker/Dockerfile`:

```dockerfile
FROM ubuntu:22.04

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3-dev \
    python3-pip \
    git \
    cmake \
    wget \
    curl

# Install Bazel
RUN wget https://github.com/bazelbuild/bazel/releases/download/6.0.0/bazel-6.0.0-installer-linux-x86_64.sh && \
    chmod +x bazel-6.0.0-installer-linux-x86_64.sh && \
    ./bazel-6.0.0-installer-linux-x86_64.sh --user && \
    rm bazel-6.0.0-installer-linux-x86_64.sh

# Install Python dependencies
COPY requirements.txt /tmp/
RUN pip install -r /tmp/requirements.txt

# Set working directory
WORKDIR /workspace

# Default command
CMD ["bash"]
```

### Using the Docker Image

To use the Docker image locally:

```bash
# Build the image
docker build -t riscv-sde:latest -f build/infrastructure/docker/Dockerfile .

# Run the image
docker run -it --rm -v $(pwd):/workspace riscv-sde:latest
```

## Kubernetes Integration

For scalable CI/CD, the project supports Kubernetes integration.

### Kubernetes Configuration

The Kubernetes configuration is stored in `build/infrastructure/kubernetes/`:

```yaml
# build/infrastructure/kubernetes/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: riscv-sde-config
data:
  config.yaml: |
    cores: 
      - simple_core
    benchmarks:
      - hello-world
    cores_config:
      simple_core:
        simulator: verilator
        options:
          trace: true
          max_cycles: 10000
    output_dir: output/simple_core_test
```

```yaml
# build/infrastructure/kubernetes/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: riscv-sde-simulation
spec:
  template:
    spec:
      containers:
      - name: riscv-sde
        image: riscv-sde:latest
        command: ["./run_simulation.py", "--config", "/config/config.yaml"]
        volumeMounts:
        - name: config-volume
          mountPath: /config
      volumes:
      - name: config-volume
        configMap:
          name: riscv-sde-config
      restartPolicy: Never
  backoffLimit: 4
```

## Release Process

The release process is automated through the CI/CD pipeline.

### Release Steps

1. **Version Bump**: Update version in code and documentation
2. **Create Release Branch**: Create a release branch from main
3. **Run Tests**: Run full test suite on release branch
4. **Create Release**: Tag the release and create GitHub release
5. **Generate Artifacts**: Build release artifacts
6. **Publish Documentation**: Update documentation site
7. **Announce Release**: Notify users of new release

### Release Script

The release process is automated by the `scripts/release.sh` script:

```bash
#!/bin/bash
# Release script for RISC-V Silicon Design Environment

# Get version
VERSION=$1
if [ -z "$VERSION" ]; then
    echo "Usage: $0 <version>"
    exit 1
fi

# Update version in files
sed -i "s/version = '.*'/version = '$VERSION'/g" docs/conf.py
sed -i "s/version = '.*'/version = '$VERSION'/g" pyproject.toml

# Commit changes
git add docs/conf.py pyproject.toml
git commit -m "Bump version to $VERSION"

# Create release branch
git checkout -b release-$VERSION

# Push branch
git push origin release-$VERSION

# Wait for CI to complete
echo "Waiting for CI to complete..."
sleep 300

# Create tag
git tag -a v$VERSION -m "Release v$VERSION"
git push origin v$VERSION

# Create GitHub release
gh release create v$VERSION --title "v$VERSION" --notes "Release v$VERSION"

echo "Release v$VERSION created successfully!"
```

## Continuous Deployment

The continuous deployment process automatically deploys the documentation and artifacts.

### Documentation Deployment

The documentation is deployed to GitHub Pages:

```yaml
deploy-docs:
  needs: build-docs
  if: github.ref == 'refs/heads/main'
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation
        path: ./docs/_build/html
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
```

### Artifact Deployment

Release artifacts are uploaded to GitHub Releases:

```yaml
deploy-artifacts:
  needs: build
  if: startsWith(github.ref, 'refs/tags/')
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: ./artifacts
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/riscv-sde.tar.gz
        asset_name: riscv-sde-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
```

## Monitoring and Notifications

The CI/CD pipeline includes monitoring and notifications to keep the team informed.

### Slack Notifications

Notifications are sent to Slack:

```yaml
slack-notification:
  needs: [build, test, analyze, deploy]
  if: always()
  runs-on: ubuntu-latest
  steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: ci-cd
        SLACK_TITLE: CI/CD Pipeline
        SLACK_MESSAGE: 'Build: ${{ needs.build.result }}, Test: ${{ needs.test.result }}, Analyze: ${{ needs.analyze.result }}, Deploy: ${{ needs.deploy.result }}'
        SLACK_COLOR: ${{ job.status }}
```

### Email Notifications

Email notifications are also sent:

```yaml
email-notification:
  needs: [build, test, analyze, deploy]
  if: always()
  runs-on: ubuntu-latest
  steps:
    - name: Send Email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: CI/CD Pipeline Results
        body: |
          Build: ${{ needs.build.result }}
          Test: ${{ needs.test.result }}
          Analyze: ${{ needs.analyze.result }}
          Deploy: ${{ needs.deploy.result }}
        to: team@example.com
        from: CI/CD <ci@example.com>
```

## Security Considerations

The CI/CD pipeline includes security measures to protect sensitive information.

### Secret Management

Secrets are managed using GitHub Secrets or Jenkins Credentials:

```yaml
deploy:
  needs: analyze
  if: github.ref == 'refs/heads/main'
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
    - name: Build documentation
      run: |
        cd docs
        make html
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
```

### Vulnerability Scanning

The pipeline includes vulnerability scanning:

```yaml
security-scan:
  needs: build
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v3
    - name: Run Bandit
      run: |
        pip install bandit
        bandit -r build/ design/ validate/
    - name: Run Dependency Check
      run: |
        pip install safety
        safety check -r requirements.txt
```

## Conclusion

The CI/CD pipeline ensures that the RISC-V Silicon Design Environment is built, tested, and deployed in a consistent and reliable manner. By automating these processes, we can focus on developing new features and improving the existing ones.
